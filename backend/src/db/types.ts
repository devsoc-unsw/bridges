/**
 * This file was generated by kysely-codegen.
 * Please do not edit it manually.
 */

import type { ColumnType } from "kysely";

export type Generated<T> = T extends ColumnType<infer S, infer I, infer U>
  ? ColumnType<S, I | undefined, U>
  : ColumnType<T, T | undefined, T>;

export type Timestamp = ColumnType<Date, Date | string, Date | string>;

export interface EventHosts {
  event_id: string;
  society_id: string;
}

export interface Events {
  cover_image_url: string | null;
  description: string | null;
  end_date: Timestamp;
  id: Generated<string>;
  looking_for_sponsors: Generated<boolean>;
  name: string;
  start_date: Timestamp;
}

export interface EventSponsorships {
  event_id: string;
  sponsor_id: string;
}

export interface Sessions {
  expires: Timestamp;
  id: Generated<string>;
  session_token: string;
  society_id: string;
}

export interface Socials {
  id: Generated<number>;
  society_id: string;
}

export interface Societies {
  contact_email: string;
  description: string | null;
  id: Generated<string>;
  is_approved: Generated<boolean>;
  login_email: string;
  logo_url: string | null;
  member_count: number | null;
  name: string;
}

export interface SocietySponsorships {
  society_id: string;
  sponsor_id: string;
}

export interface Sponsors {
  id: Generated<string>;
  logo_url: string | null;
  name: string;
  website: string | null;
}

export interface VerificationTokens {
  expires: Timestamp;
  id: string;
  token: string;
}

export interface DB {
  event_hosts: EventHosts;
  event_sponsorships: EventSponsorships;
  events: Events;
  sessions: Sessions;
  socials: Socials;
  societies: Societies;
  society_sponsorships: SocietySponsorships;
  sponsors: Sponsors;
  verification_tokens: VerificationTokens;
}
