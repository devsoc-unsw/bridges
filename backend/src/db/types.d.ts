/**
 * This file was generated by kysely-codegen.
 * Please do not edit it manually.
 */

import type { ColumnType } from "kysely";

export type Generated<T> = T extends ColumnType<infer S, infer I, infer U>
  ? ColumnType<S, I | undefined, U>
  : ColumnType<T, T | undefined, T>;

export type Timestamp = ColumnType<Date, Date | string, Date | string>;

export interface Event {
  cover_image_url: string | null;
  description: string | null;
  end_date: Timestamp;
  id: Generated<string>;
  looking_for_sponsors: Generated<boolean>;
  name: string;
  start_date: Timestamp;
}

export interface EventHost {
  event_id: string;
  society_id: string;
}

export interface EventSponsorship {
  event_id: string;
  sponsor_id: string;
}

export interface Session {
  expires: Timestamp;
  id: Generated<string>;
  session_token: string;
  society_id: string;
}

export interface Social {
  id: Generated<number>;
  society_id: string;
}

export interface Society {
  contact_email: string;
  description: string | null;
  id: Generated<string>;
  is_approved: Generated<boolean>;
  login_email: string;
  logo_url: string | null;
  member_count: number | null;
  name: string;
}

export interface SocietySponsorship {
  society_id: string;
  sponsor_id: string;
}

export interface Sponsor {
  id: Generated<string>;
  logo_url: string | null;
  name: string;
  website: string | null;
}

export interface VerificationTokens {
  expires: Timestamp;
  id: string;
  token: string;
}

export interface DB {
  event: Event;
  event_host: EventHost;
  event_sponsorship: EventSponsorship;
  session: Session;
  social: Social;
  society: Society;
  society_sponsorship: SocietySponsorship;
  sponsor: Sponsor;
  verification_tokens: VerificationTokens;
}
